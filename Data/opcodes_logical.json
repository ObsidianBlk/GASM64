{
  "AND":{
    "name":"Logical AND",
    "description":"A logical AND is performed, bit by bit, on the accumulator contents using the contents of a byte of memory.",
    "modes":{
      "immediate":{
        "opcode":"29",
        "bytes":2,
        "cycles":2,
        "pagecross":0
      },
      "zero_page":{
        "opcode":"25",
        "bytes":2,
        "cycles":3,
        "pagecross":0
      },
      "zero_page_x":{
        "opcode":"35",
        "bytes":2,
        "cycles":4,
        "pagecross":0
      },
      "absolute":{
        "opcode":"2D",
        "bytes":3,
        "cycles":4,
        "pagecross":0
      },
      "absolute_x":{
        "opcode":"3D",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "absolute_y":{
        "opcode":"39",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "indirect_x":{
        "opcode":"21",
        "bytes":2,
        "cycles":6,
        "pagecross":0
      },
      "indirect_y":{
        "opcode":"31",
        "bytes":2,
        "cycles":5,
        "pagecross":1
      }
    },
    "flags":"N,Z",
    "tags":["Logical", "Accumulator"]
  },
  
  "EOR":{
    "name":"Exclusive OR",
    "description":"An exclusive OR is performed, bit by bit, on the accumulator contents using the contents of a byte of memory.",
    "modes":{
      "immediate":{
        "opcode":"49",
        "bytes":2,
        "cycles":2,
        "pagecross":0
      },
      "zero_page":{
        "opcode":"45",
        "bytes":2,
        "cycles":3,
        "pagecross":0
      },
      "zero_page_x":{
        "opcode":"55",
        "bytes":2,
        "cycles":4,
        "pagecross":0
      },
      "absolute":{
        "opcode":"4D",
        "bytes":3,
        "cycles":4,
        "pagecross":0
      },
      "absolute_x":{
        "opcode":"5D",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "absolute_y":{
        "opcode":"59",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "indirect_x":{
        "opcode":"41",
        "bytes":2,
        "cycles":6,
        "pagecross":0
      },
      "indirect_y":{
        "opcode":"51",
        "bytes":2,
        "cycles":5,
        "pagecross":1
      }
    },
    "flags":"N,Z",
    "tags":["Logical", "Accumulator"]
  },
  
  "ORA":{
    "name":"Logical Inclusive OR",
    "description":"An inclusive OR is performed, bit by bit, on the accumulator contents using the contents of a byte of memory.",
    "modes":{
      "immediate":{
        "opcode":"09",
        "bytes":2,
        "cycles":2,
        "pagecross":0
      },
      "zero_page":{
        "opcode":"05",
        "bytes":2,
        "cycles":3,
        "pagecross":0
      },
      "zero_page_x":{
        "opcode":"15",
        "bytes":2,
        "cycles":4,
        "pagecross":0
      },
      "absolute":{
        "opcode":"0D",
        "bytes":3,
        "cycles":4,
        "pagecross":0
      },
      "absolute_x":{
        "opcode":"1D",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "absolute_y":{
        "opcode":"19",
        "bytes":3,
        "cycles":4,
        "pagecross":1
      },
      "indirect_x":{
        "opcode":"01",
        "bytes":2,
        "cycles":6,
        "pagecross":0
      },
      "indirect_y":{
        "opcode":"11",
        "bytes":2,
        "cycles":5,
        "pagecross":1
      }
    },
    "flags":"N,Z",
    "tags":["Logical", "Accumulator"]
  },
  
  "BIT":{
    "name":"Bit Test",
    "description":"This instructions is used to test if one or more bits are set in a target memory location. The mask pattern in A is ANDed with the value in memory to set or clear the zero flag, but the result is not kept. Bits 7 and 6 of the value from memory are copied into the N and V flags.",
    "modes":{
      "zero_page":{
        "opcode":"24",
        "bytes":2,
        "cycles":3,
        "pagecross":0
      },
      "absolute":{
        "opcode":"2C",
        "bytes":3,
        "cycles":4,
        "pagecross":0
      } 
    },
    "flags":"N,Z,V",
    "tags":["Logical"]
  }
}

